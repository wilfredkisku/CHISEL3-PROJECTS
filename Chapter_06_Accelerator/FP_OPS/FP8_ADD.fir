circuit FP8_ADD :
  module FP8_ADD :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip inputA : UInt<8>, flip inputB : UInt<8>, output : UInt<8>}

    node signA = bits(io.inputA, 7, 7) @[FP8_ADD.scala 13:18]
    node expA = bits(io.inputA, 6, 2) @[FP8_ADD.scala 14:22]
    node sigA = bits(io.inputA, 1, 0) @[FP8_ADD.scala 15:25]
    node signB = bits(io.inputB, 7, 7) @[FP8_ADD.scala 13:18]
    node expB = bits(io.inputB, 6, 2) @[FP8_ADD.scala 14:22]
    node sigB = bits(io.inputB, 1, 0) @[FP8_ADD.scala 15:25]
    node _infFlagA_T = eq(expA, UInt<5>("h1f")) @[FP8_ADD.scala 24:23]
    node _infFlagA_T_1 = eq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 24:46]
    node infFlagA = and(_infFlagA_T, _infFlagA_T_1) @[FP8_ADD.scala 24:38]
    node _infFlagB_T = eq(expB, UInt<5>("h1f")) @[FP8_ADD.scala 25:23]
    node _infFlagB_T_1 = eq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 25:46]
    node infFlagB = and(_infFlagB_T, _infFlagB_T_1) @[FP8_ADD.scala 25:38]
    node _zeroFlagA_T = eq(expA, UInt<1>("h0")) @[FP8_ADD.scala 28:24]
    node _zeroFlagA_T_1 = eq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 28:47]
    node zeroFlagA = and(_zeroFlagA_T, _zeroFlagA_T_1) @[FP8_ADD.scala 28:39]
    node _zeroFlagB_T = eq(expB, UInt<1>("h0")) @[FP8_ADD.scala 29:24]
    node _zeroFlagB_T_1 = eq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 29:47]
    node zeroFlagB = and(_zeroFlagB_T, _zeroFlagB_T_1) @[FP8_ADD.scala 29:39]
    node _nanFlagA_T = eq(expA, UInt<5>("h1f")) @[FP8_ADD.scala 32:23]
    node _nanFlagA_T_1 = neq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 32:46]
    node nanFlagA = and(_nanFlagA_T, _nanFlagA_T_1) @[FP8_ADD.scala 32:38]
    node _nanFlagB_T = eq(expB, UInt<5>("h1f")) @[FP8_ADD.scala 33:23]
    node _nanFlagB_T_1 = neq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 33:46]
    node nanFlagB = and(_nanFlagB_T, _nanFlagB_T_1) @[FP8_ADD.scala 33:38]
    node _subFlagA_T = eq(expA, UInt<1>("h0")) @[FP8_ADD.scala 36:23]
    node _subFlagA_T_1 = neq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 36:46]
    node subFlagA = and(_subFlagA_T, _subFlagA_T_1) @[FP8_ADD.scala 36:38]
    node _subFlagB_T = eq(expB, UInt<1>("h0")) @[FP8_ADD.scala 37:23]
    node _subFlagB_T_1 = neq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 37:46]
    node subFlagB = and(_subFlagB_T, _subFlagB_T_1) @[FP8_ADD.scala 37:38]
    wire ovrChk_a : UInt<4> @[FP8_ADD.scala 40:22]
    wire ovrChk_s : UInt<4> @[FP8_ADD.scala 41:22]
    wire difChk : UInt<5> @[FP8_ADD.scala 42:20]
    ovrChk_a <= UInt<1>("h0") @[FP8_ADD.scala 43:12]
    ovrChk_s <= UInt<1>("h0") @[FP8_ADD.scala 44:12]
    difChk <= UInt<1>("h0") @[FP8_ADD.scala 45:10]
    node _T = and(zeroFlagA, zeroFlagB) @[FP8_ADD.scala 47:19]
    when _T : @[FP8_ADD.scala 47:32]
      io.output <= UInt<1>("h0") @[FP8_ADD.scala 49:15]
    else :
      node _T_1 = or(infFlagA, infFlagB) @[FP8_ADD.scala 50:23]
      when _T_1 : @[FP8_ADD.scala 50:35]
        node _T_2 = and(infFlagA, infFlagB) @[FP8_ADD.scala 52:20]
        node _T_3 = neq(signA, signB) @[FP8_ADD.scala 52:42]
        node _T_4 = and(_T_2, _T_3) @[FP8_ADD.scala 52:32]
        when _T_4 : @[FP8_ADD.scala 52:53]
          io.output <= UInt<7>("h7f") @[FP8_ADD.scala 53:17]
        else :
          node _io_output_T = mux(infFlagA, io.inputA, io.inputB) @[FP8_ADD.scala 55:23]
          io.output <= _io_output_T @[FP8_ADD.scala 55:17]
      else :
        node _T_5 = or(nanFlagA, nanFlagB) @[FP8_ADD.scala 57:23]
        when _T_5 : @[FP8_ADD.scala 57:35]
          io.output <= UInt<7>("h7f") @[FP8_ADD.scala 58:15]
        else :
          node _T_6 = and(subFlagA, subFlagB) @[FP8_ADD.scala 61:19]
          when _T_6 : @[FP8_ADD.scala 61:31]
            io.output <= UInt<1>("h0") @[FP8_ADD.scala 65:17]
          else :
            node _T_7 = eq(subFlagA, UInt<1>("h0")) @[FP8_ADD.scala 69:16]
            node _T_8 = eq(subFlagB, UInt<1>("h0")) @[FP8_ADD.scala 69:29]
            node _T_9 = and(_T_7, _T_8) @[FP8_ADD.scala 69:26]
            when _T_9 : @[FP8_ADD.scala 69:39]
              node _T_10 = gt(expA, expB) @[FP8_ADD.scala 78:17]
              when _T_10 : @[FP8_ADD.scala 78:24]
                node _ovrChk_a_T = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                node _ovrChk_a_T_1 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                node _ovrChk_a_T_2 = sub(expA, expB) @[FP8_ADD.scala 80:64]
                node _ovrChk_a_T_3 = tail(_ovrChk_a_T_2, 1) @[FP8_ADD.scala 80:64]
                node _ovrChk_a_T_4 = dshr(_ovrChk_a_T_1, _ovrChk_a_T_3) @[FP8_ADD.scala 80:55]
                node _ovrChk_a_T_5 = add(_ovrChk_a_T, _ovrChk_a_T_4) @[FP8_ADD.scala 80:36]
                ovrChk_a <= _ovrChk_a_T_5 @[FP8_ADD.scala 80:18]
                node _ovrChk_s_T = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                node _ovrChk_s_T_1 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                node _ovrChk_s_T_2 = sub(expA, expB) @[FP8_ADD.scala 81:63]
                node _ovrChk_s_T_3 = tail(_ovrChk_s_T_2, 1) @[FP8_ADD.scala 81:63]
                node _ovrChk_s_T_4 = dshr(_ovrChk_s_T_1, _ovrChk_s_T_3) @[FP8_ADD.scala 81:54]
                node _ovrChk_s_T_5 = sub(_ovrChk_s_T, _ovrChk_s_T_4) @[FP8_ADD.scala 81:36]
                node _ovrChk_s_T_6 = tail(_ovrChk_s_T_5, 1) @[FP8_ADD.scala 81:36]
                ovrChk_s <= _ovrChk_s_T_6 @[FP8_ADD.scala 81:18]
                node _io_output_T_1 = eq(signA, UInt<1>("h0")) @[FP8_ADD.scala 82:32]
                node _io_output_T_2 = eq(signB, UInt<1>("h0")) @[FP8_ADD.scala 82:68]
                node _io_output_T_3 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 82:85]
                node _io_output_T_4 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 82:100]
                node _io_output_T_5 = mux(_io_output_T_2, _io_output_T_3, _io_output_T_4) @[FP8_ADD.scala 82:61]
                node io_output_hi = cat(signA, expA) @[Cat.scala 33:92]
                node _io_output_T_6 = cat(io_output_hi, _io_output_T_5) @[Cat.scala 33:92]
                node _io_output_T_7 = eq(signB, UInt<1>("h0")) @[FP8_ADD.scala 82:136]
                node _io_output_T_8 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 82:153]
                node _io_output_T_9 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 82:168]
                node _io_output_T_10 = mux(_io_output_T_7, _io_output_T_8, _io_output_T_9) @[FP8_ADD.scala 82:129]
                node io_output_hi_1 = cat(signA, expA) @[Cat.scala 33:92]
                node _io_output_T_11 = cat(io_output_hi_1, _io_output_T_10) @[Cat.scala 33:92]
                node _io_output_T_12 = mux(_io_output_T_1, _io_output_T_6, _io_output_T_11) @[FP8_ADD.scala 82:25]
                io.output <= _io_output_T_12 @[FP8_ADD.scala 82:19]
              else :
                node _ovrChk_a_T_6 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                node _ovrChk_a_T_7 = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                node _ovrChk_a_T_8 = sub(expB, expA) @[FP8_ADD.scala 85:64]
                node _ovrChk_a_T_9 = tail(_ovrChk_a_T_8, 1) @[FP8_ADD.scala 85:64]
                node _ovrChk_a_T_10 = dshr(_ovrChk_a_T_7, _ovrChk_a_T_9) @[FP8_ADD.scala 85:55]
                node _ovrChk_a_T_11 = add(_ovrChk_a_T_6, _ovrChk_a_T_10) @[FP8_ADD.scala 85:36]
                ovrChk_a <= _ovrChk_a_T_11 @[FP8_ADD.scala 85:18]
                node _ovrChk_s_T_7 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                node _ovrChk_s_T_8 = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                node _ovrChk_s_T_9 = sub(expB, expA) @[FP8_ADD.scala 86:63]
                node _ovrChk_s_T_10 = tail(_ovrChk_s_T_9, 1) @[FP8_ADD.scala 86:63]
                node _ovrChk_s_T_11 = dshr(_ovrChk_s_T_8, _ovrChk_s_T_10) @[FP8_ADD.scala 86:54]
                node _ovrChk_s_T_12 = sub(_ovrChk_s_T_7, _ovrChk_s_T_11) @[FP8_ADD.scala 86:36]
                node _ovrChk_s_T_13 = tail(_ovrChk_s_T_12, 1) @[FP8_ADD.scala 86:36]
                ovrChk_s <= _ovrChk_s_T_13 @[FP8_ADD.scala 86:18]
                node _io_output_T_13 = eq(signB, UInt<1>("h0")) @[FP8_ADD.scala 87:32]
                node _io_output_T_14 = eq(signA, UInt<1>("h0")) @[FP8_ADD.scala 87:68]
                node _io_output_T_15 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 87:85]
                node _io_output_T_16 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 87:100]
                node _io_output_T_17 = mux(_io_output_T_14, _io_output_T_15, _io_output_T_16) @[FP8_ADD.scala 87:61]
                node io_output_hi_2 = cat(signB, expB) @[Cat.scala 33:92]
                node _io_output_T_18 = cat(io_output_hi_2, _io_output_T_17) @[Cat.scala 33:92]
                node _io_output_T_19 = eq(signA, UInt<1>("h0")) @[FP8_ADD.scala 87:136]
                node _io_output_T_20 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 87:153]
                node _io_output_T_21 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 87:168]
                node _io_output_T_22 = mux(_io_output_T_19, _io_output_T_20, _io_output_T_21) @[FP8_ADD.scala 87:129]
                node io_output_hi_3 = cat(signB, expB) @[Cat.scala 33:92]
                node _io_output_T_23 = cat(io_output_hi_3, _io_output_T_22) @[Cat.scala 33:92]
                node _io_output_T_24 = mux(_io_output_T_13, _io_output_T_18, _io_output_T_23) @[FP8_ADD.scala 87:25]
                io.output <= _io_output_T_24 @[FP8_ADD.scala 87:19]
            else :
              io.output <= UInt<1>("h0") @[FP8_ADD.scala 96:17]


