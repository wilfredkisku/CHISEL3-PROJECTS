circuit FP8_ADD :
  module FP8_ADD :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip inputA : UInt<8>, flip inputB : UInt<8>, output : UInt<8>}

    node signA = bits(io.inputA, 7, 7) @[FP8_ADD.scala 13:18]
    node expA = bits(io.inputA, 6, 2) @[FP8_ADD.scala 14:22]
    node sigA = bits(io.inputA, 1, 0) @[FP8_ADD.scala 15:25]
    node signB = bits(io.inputB, 7, 7) @[FP8_ADD.scala 13:18]
    node expB = bits(io.inputB, 6, 2) @[FP8_ADD.scala 14:22]
    node sigB = bits(io.inputB, 1, 0) @[FP8_ADD.scala 15:25]
    node _infFlagA_T = eq(expA, UInt<5>("h1f")) @[FP8_ADD.scala 24:23]
    node _infFlagA_T_1 = eq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 24:46]
    node infFlagA = and(_infFlagA_T, _infFlagA_T_1) @[FP8_ADD.scala 24:38]
    node _infFlagB_T = eq(expB, UInt<5>("h1f")) @[FP8_ADD.scala 25:23]
    node _infFlagB_T_1 = eq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 25:46]
    node infFlagB = and(_infFlagB_T, _infFlagB_T_1) @[FP8_ADD.scala 25:38]
    node _zeroFlagA_T = eq(expA, UInt<1>("h0")) @[FP8_ADD.scala 28:24]
    node _zeroFlagA_T_1 = eq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 28:47]
    node zeroFlagA = and(_zeroFlagA_T, _zeroFlagA_T_1) @[FP8_ADD.scala 28:39]
    node _zeroFlagB_T = eq(expB, UInt<1>("h0")) @[FP8_ADD.scala 29:24]
    node _zeroFlagB_T_1 = eq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 29:47]
    node zeroFlagB = and(_zeroFlagB_T, _zeroFlagB_T_1) @[FP8_ADD.scala 29:39]
    node _nanFlagA_T = eq(expA, UInt<5>("h1f")) @[FP8_ADD.scala 32:23]
    node _nanFlagA_T_1 = neq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 32:46]
    node nanFlagA = and(_nanFlagA_T, _nanFlagA_T_1) @[FP8_ADD.scala 32:38]
    node _nanFlagB_T = eq(expB, UInt<5>("h1f")) @[FP8_ADD.scala 33:23]
    node _nanFlagB_T_1 = neq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 33:46]
    node nanFlagB = and(_nanFlagB_T, _nanFlagB_T_1) @[FP8_ADD.scala 33:38]
    node _subFlagA_T = eq(expA, UInt<1>("h0")) @[FP8_ADD.scala 36:23]
    node _subFlagA_T_1 = neq(sigA, UInt<1>("h0")) @[FP8_ADD.scala 36:46]
    node subFlagA = and(_subFlagA_T, _subFlagA_T_1) @[FP8_ADD.scala 36:38]
    node _subFlagB_T = eq(expB, UInt<1>("h0")) @[FP8_ADD.scala 37:23]
    node _subFlagB_T_1 = neq(sigB, UInt<1>("h0")) @[FP8_ADD.scala 37:46]
    node subFlagB = and(_subFlagB_T, _subFlagB_T_1) @[FP8_ADD.scala 37:38]
    wire ovrChk_a : UInt<4> @[FP8_ADD.scala 40:22]
    wire ovrChk_s : UInt<4> @[FP8_ADD.scala 41:22]
    wire difChk : UInt<5> @[FP8_ADD.scala 42:20]
    ovrChk_a <= UInt<1>("h0") @[FP8_ADD.scala 43:12]
    ovrChk_s <= UInt<1>("h0") @[FP8_ADD.scala 44:12]
    difChk <= UInt<1>("h0") @[FP8_ADD.scala 45:10]
    node _T = and(zeroFlagA, zeroFlagB) @[FP8_ADD.scala 47:19]
    when _T : @[FP8_ADD.scala 47:32]
      io.output <= UInt<1>("h0") @[FP8_ADD.scala 49:15]
    else :
      node _T_1 = or(zeroFlagA, zeroFlagB) @[FP8_ADD.scala 50:24]
      when _T_1 : @[FP8_ADD.scala 50:37]
        node _io_output_T = mux(zeroFlagA, io.inputB, io.inputA) @[FP8_ADD.scala 51:21]
        io.output <= _io_output_T @[FP8_ADD.scala 51:15]
      else :
        node _T_2 = or(infFlagA, infFlagB) @[FP8_ADD.scala 52:23]
        when _T_2 : @[FP8_ADD.scala 52:35]
          node _T_3 = and(infFlagA, infFlagB) @[FP8_ADD.scala 54:20]
          node _T_4 = neq(signA, signB) @[FP8_ADD.scala 54:42]
          node _T_5 = and(_T_3, _T_4) @[FP8_ADD.scala 54:32]
          when _T_5 : @[FP8_ADD.scala 54:53]
            io.output <= UInt<7>("h7f") @[FP8_ADD.scala 55:17]
          else :
            node _io_output_T_1 = mux(infFlagA, io.inputA, io.inputB) @[FP8_ADD.scala 57:23]
            io.output <= _io_output_T_1 @[FP8_ADD.scala 57:17]
        else :
          node _T_6 = or(nanFlagA, nanFlagB) @[FP8_ADD.scala 59:23]
          when _T_6 : @[FP8_ADD.scala 59:35]
            io.output <= UInt<7>("h7f") @[FP8_ADD.scala 60:15]
          else :
            node _T_7 = and(subFlagA, subFlagB) @[FP8_ADD.scala 63:19]
            when _T_7 : @[FP8_ADD.scala 63:31]
              io.output <= UInt<1>("h0") @[FP8_ADD.scala 67:17]
            else :
              node _T_8 = eq(subFlagA, UInt<1>("h0")) @[FP8_ADD.scala 71:16]
              node _T_9 = eq(subFlagB, UInt<1>("h0")) @[FP8_ADD.scala 71:29]
              node _T_10 = and(_T_8, _T_9) @[FP8_ADD.scala 71:26]
              when _T_10 : @[FP8_ADD.scala 71:39]
                node _T_11 = gt(expA, expB) @[FP8_ADD.scala 80:17]
                when _T_11 : @[FP8_ADD.scala 80:24]
                  node _ovrChk_a_T = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                  node _ovrChk_a_T_1 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                  node _ovrChk_a_T_2 = sub(expA, expB) @[FP8_ADD.scala 82:64]
                  node _ovrChk_a_T_3 = tail(_ovrChk_a_T_2, 1) @[FP8_ADD.scala 82:64]
                  node _ovrChk_a_T_4 = dshr(_ovrChk_a_T_1, _ovrChk_a_T_3) @[FP8_ADD.scala 82:55]
                  node _ovrChk_a_T_5 = add(_ovrChk_a_T, _ovrChk_a_T_4) @[FP8_ADD.scala 82:36]
                  ovrChk_a <= _ovrChk_a_T_5 @[FP8_ADD.scala 82:18]
                  node _ovrChk_s_T = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                  node _ovrChk_s_T_1 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                  node _ovrChk_s_T_2 = sub(expA, expB) @[FP8_ADD.scala 83:63]
                  node _ovrChk_s_T_3 = tail(_ovrChk_s_T_2, 1) @[FP8_ADD.scala 83:63]
                  node _ovrChk_s_T_4 = dshr(_ovrChk_s_T_1, _ovrChk_s_T_3) @[FP8_ADD.scala 83:54]
                  node _ovrChk_s_T_5 = sub(_ovrChk_s_T, _ovrChk_s_T_4) @[FP8_ADD.scala 83:36]
                  node _ovrChk_s_T_6 = tail(_ovrChk_s_T_5, 1) @[FP8_ADD.scala 83:36]
                  ovrChk_s <= _ovrChk_s_T_6 @[FP8_ADD.scala 83:18]
                  node _io_output_T_2 = eq(signA, UInt<1>("h0")) @[FP8_ADD.scala 84:32]
                  node _io_output_T_3 = eq(signB, UInt<1>("h0")) @[FP8_ADD.scala 84:68]
                  node _io_output_T_4 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 84:85]
                  node _io_output_T_5 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 84:100]
                  node _io_output_T_6 = mux(_io_output_T_3, _io_output_T_4, _io_output_T_5) @[FP8_ADD.scala 84:61]
                  node io_output_hi = cat(signA, expA) @[Cat.scala 33:92]
                  node _io_output_T_7 = cat(io_output_hi, _io_output_T_6) @[Cat.scala 33:92]
                  node _io_output_T_8 = eq(signB, UInt<1>("h0")) @[FP8_ADD.scala 84:136]
                  node _io_output_T_9 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 84:153]
                  node _io_output_T_10 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 84:168]
                  node _io_output_T_11 = mux(_io_output_T_8, _io_output_T_9, _io_output_T_10) @[FP8_ADD.scala 84:129]
                  node io_output_hi_1 = cat(signA, expA) @[Cat.scala 33:92]
                  node _io_output_T_12 = cat(io_output_hi_1, _io_output_T_11) @[Cat.scala 33:92]
                  node _io_output_T_13 = mux(_io_output_T_2, _io_output_T_7, _io_output_T_12) @[FP8_ADD.scala 84:25]
                  io.output <= _io_output_T_13 @[FP8_ADD.scala 84:19]
                else :
                  node _T_12 = gt(expB, expA) @[FP8_ADD.scala 85:23]
                  when _T_12 : @[FP8_ADD.scala 85:30]
                    node _ovrChk_a_T_6 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                    node _ovrChk_a_T_7 = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                    node _ovrChk_a_T_8 = sub(expB, expA) @[FP8_ADD.scala 87:64]
                    node _ovrChk_a_T_9 = tail(_ovrChk_a_T_8, 1) @[FP8_ADD.scala 87:64]
                    node _ovrChk_a_T_10 = dshr(_ovrChk_a_T_7, _ovrChk_a_T_9) @[FP8_ADD.scala 87:55]
                    node _ovrChk_a_T_11 = add(_ovrChk_a_T_6, _ovrChk_a_T_10) @[FP8_ADD.scala 87:36]
                    ovrChk_a <= _ovrChk_a_T_11 @[FP8_ADD.scala 87:18]
                    node _ovrChk_s_T_7 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                    node _ovrChk_s_T_8 = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                    node _ovrChk_s_T_9 = sub(expB, expA) @[FP8_ADD.scala 88:63]
                    node _ovrChk_s_T_10 = tail(_ovrChk_s_T_9, 1) @[FP8_ADD.scala 88:63]
                    node _ovrChk_s_T_11 = dshr(_ovrChk_s_T_8, _ovrChk_s_T_10) @[FP8_ADD.scala 88:54]
                    node _ovrChk_s_T_12 = sub(_ovrChk_s_T_7, _ovrChk_s_T_11) @[FP8_ADD.scala 88:36]
                    node _ovrChk_s_T_13 = tail(_ovrChk_s_T_12, 1) @[FP8_ADD.scala 88:36]
                    ovrChk_s <= _ovrChk_s_T_13 @[FP8_ADD.scala 88:18]
                    node _io_output_T_14 = eq(signB, UInt<1>("h0")) @[FP8_ADD.scala 89:32]
                    node _io_output_T_15 = eq(signA, UInt<1>("h0")) @[FP8_ADD.scala 89:68]
                    node _io_output_T_16 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 89:85]
                    node _io_output_T_17 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 89:100]
                    node _io_output_T_18 = mux(_io_output_T_15, _io_output_T_16, _io_output_T_17) @[FP8_ADD.scala 89:61]
                    node io_output_hi_2 = cat(signB, expB) @[Cat.scala 33:92]
                    node _io_output_T_19 = cat(io_output_hi_2, _io_output_T_18) @[Cat.scala 33:92]
                    node _io_output_T_20 = eq(signA, UInt<1>("h0")) @[FP8_ADD.scala 89:136]
                    node _io_output_T_21 = bits(ovrChk_a, 1, 0) @[FP8_ADD.scala 89:153]
                    node _io_output_T_22 = bits(ovrChk_s, 1, 0) @[FP8_ADD.scala 89:168]
                    node _io_output_T_23 = mux(_io_output_T_20, _io_output_T_21, _io_output_T_22) @[FP8_ADD.scala 89:129]
                    node io_output_hi_3 = cat(signB, expB) @[Cat.scala 33:92]
                    node _io_output_T_24 = cat(io_output_hi_3, _io_output_T_23) @[Cat.scala 33:92]
                    node _io_output_T_25 = mux(_io_output_T_14, _io_output_T_19, _io_output_T_24) @[FP8_ADD.scala 89:25]
                    io.output <= _io_output_T_25 @[FP8_ADD.scala 89:19]
                  else :
                    node _ovrChk_a_T_12 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                    node _ovrChk_a_T_13 = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                    node _ovrChk_a_T_14 = sub(expB, expA) @[FP8_ADD.scala 91:64]
                    node _ovrChk_a_T_15 = tail(_ovrChk_a_T_14, 1) @[FP8_ADD.scala 91:64]
                    node _ovrChk_a_T_16 = dshr(_ovrChk_a_T_13, _ovrChk_a_T_15) @[FP8_ADD.scala 91:55]
                    node _ovrChk_a_T_17 = add(_ovrChk_a_T_12, _ovrChk_a_T_16) @[FP8_ADD.scala 91:36]
                    ovrChk_a <= _ovrChk_a_T_17 @[FP8_ADD.scala 91:18]
                    node _ovrChk_s_T_14 = cat(UInt<1>("h1"), sigB) @[Cat.scala 33:92]
                    node _ovrChk_s_T_15 = cat(UInt<1>("h1"), sigA) @[Cat.scala 33:92]
                    node _ovrChk_s_T_16 = sub(expB, expA) @[FP8_ADD.scala 92:63]
                    node _ovrChk_s_T_17 = tail(_ovrChk_s_T_16, 1) @[FP8_ADD.scala 92:63]
                    node _ovrChk_s_T_18 = dshr(_ovrChk_s_T_15, _ovrChk_s_T_17) @[FP8_ADD.scala 92:54]
                    node _ovrChk_s_T_19 = sub(_ovrChk_s_T_14, _ovrChk_s_T_18) @[FP8_ADD.scala 92:36]
                    node _ovrChk_s_T_20 = tail(_ovrChk_s_T_19, 1) @[FP8_ADD.scala 92:36]
                    ovrChk_s <= _ovrChk_s_T_20 @[FP8_ADD.scala 92:18]
                    node _T_13 = gt(sigA, sigB) @[FP8_ADD.scala 94:19]
                    when _T_13 : @[FP8_ADD.scala 94:26]
                      io.output <= UInt<1>("h0") @[FP8_ADD.scala 95:21]
                    else :
                      node _T_14 = gt(sigB, sigA) @[FP8_ADD.scala 96:25]
                      when _T_14 : @[FP8_ADD.scala 96:32]
                        io.output <= UInt<1>("h0") @[FP8_ADD.scala 97:21]
                      else :
                        node _io_output_T_26 = neq(signA, signB) @[FP8_ADD.scala 99:34]
                        node _io_output_T_27 = bits(ovrChk_a, 3, 3) @[FP8_ADD.scala 99:76]
                        node _io_output_T_28 = add(expA, _io_output_T_27) @[FP8_ADD.scala 99:66]
                        node _io_output_T_29 = tail(_io_output_T_28, 1) @[FP8_ADD.scala 99:66]
                        node _io_output_T_30 = bits(ovrChk_a, 3, 3) @[FP8_ADD.scala 99:102]
                        node _io_output_T_31 = dshr(ovrChk_a, _io_output_T_30) @[FP8_ADD.scala 99:91]
                        node _io_output_T_32 = bits(_io_output_T_31, 1, 0) @[FP8_ADD.scala 99:106]
                        node io_output_hi_4 = cat(signA, _io_output_T_29) @[Cat.scala 33:92]
                        node _io_output_T_33 = cat(io_output_hi_4, _io_output_T_32) @[Cat.scala 33:92]
                        node _io_output_T_34 = mux(_io_output_T_26, UInt<1>("h0"), _io_output_T_33) @[FP8_ADD.scala 99:27]
                        io.output <= _io_output_T_34 @[FP8_ADD.scala 99:21]
              else :
                io.output <= UInt<1>("h0") @[FP8_ADD.scala 109:17]


