FIRRTL version 1.1.0
circuit FP8_MUL :
  module FP8_MUL :
    input clock : Clock
    input reset : UInt<1>
    input io_inputA : UInt<8>
    input io_inputB : UInt<8>
    output io_output : UInt<8>

    node signA = bits(io_inputA, 7, 7) @[FP8_MUL.scala 13:20]
    node expA = bits(io_inputA, 6, 2) @[FP8_MUL.scala 14:24]
    node sigA = bits(io_inputA, 1, 0) @[FP8_MUL.scala 15:27]
    node signB = bits(io_inputB, 7, 7) @[FP8_MUL.scala 13:20]
    node expB = bits(io_inputB, 6, 2) @[FP8_MUL.scala 14:24]
    node sigB = bits(io_inputB, 1, 0) @[FP8_MUL.scala 15:27]
    node _infFlagA_T = eq(expA, UInt<5>("h1f")) @[FP8_MUL.scala 24:25]
    node _infFlagA_T_1 = eq(sigA, UInt<1>("h0")) @[FP8_MUL.scala 24:48]
    node infFlagA = and(_infFlagA_T, _infFlagA_T_1) @[FP8_MUL.scala 24:40]
    node _infFlagB_T = eq(expB, UInt<5>("h1f")) @[FP8_MUL.scala 25:25]
    node _infFlagB_T_1 = eq(sigB, UInt<1>("h0")) @[FP8_MUL.scala 25:48]
    node infFlagB = and(_infFlagB_T, _infFlagB_T_1) @[FP8_MUL.scala 25:40]
    node _zeroFlagA_T = eq(expA, UInt<1>("h0")) @[FP8_MUL.scala 28:26]
    node _zeroFlagA_T_1 = eq(sigA, UInt<1>("h0")) @[FP8_MUL.scala 28:49]
    node zeroFlagA = and(_zeroFlagA_T, _zeroFlagA_T_1) @[FP8_MUL.scala 28:41]
    node _zeroFlagB_T = eq(expB, UInt<1>("h0")) @[FP8_MUL.scala 29:26]
    node _zeroFlagB_T_1 = eq(sigB, UInt<1>("h0")) @[FP8_MUL.scala 29:49]
    node zeroFlagB = and(_zeroFlagB_T, _zeroFlagB_T_1) @[FP8_MUL.scala 29:41]
    node _nanFlagA_T = eq(expA, UInt<5>("h1f")) @[FP8_MUL.scala 32:25]
    node _nanFlagA_T_1 = neq(sigA, UInt<1>("h0")) @[FP8_MUL.scala 32:48]
    node nanFlagA = and(_nanFlagA_T, _nanFlagA_T_1) @[FP8_MUL.scala 32:40]
    node _nanFlagB_T = eq(expB, UInt<5>("h1f")) @[FP8_MUL.scala 33:25]
    node _nanFlagB_T_1 = neq(sigB, UInt<1>("h0")) @[FP8_MUL.scala 33:48]
    node nanFlagB = and(_nanFlagB_T, _nanFlagB_T_1) @[FP8_MUL.scala 33:40]
    node _subFlagA_T = eq(expA, UInt<1>("h0")) @[FP8_MUL.scala 36:25]
    node _subFlagA_T_1 = neq(sigA, UInt<1>("h0")) @[FP8_MUL.scala 36:48]
    node subFlagA = and(_subFlagA_T, _subFlagA_T_1) @[FP8_MUL.scala 36:40]
    node _subFlagB_T = eq(expB, UInt<1>("h0")) @[FP8_MUL.scala 37:25]
    node _subFlagB_T_1 = neq(sigB, UInt<1>("h0")) @[FP8_MUL.scala 37:48]
    node subFlagB = and(_subFlagB_T, _subFlagB_T_1) @[FP8_MUL.scala 37:40]
    node _T = and(zeroFlagA, zeroFlagB) @[FP8_MUL.scala 43:19]
    node _T_1 = or(zeroFlagA, zeroFlagB) @[FP8_MUL.scala 46:24]
    node _T_2 = or(infFlagA, infFlagB) @[FP8_MUL.scala 48:23]
    node _T_3 = and(infFlagA, infFlagB) @[FP8_MUL.scala 50:20]
    node _T_4 = neq(signA, signB) @[FP8_MUL.scala 50:42]
    node _T_5 = and(_T_3, _T_4) @[FP8_MUL.scala 50:32]
    node _io_output_T = mux(infFlagA, io_inputA, io_inputB) @[FP8_MUL.scala 53:23]
    node _GEN_0 = mux(_T_5, UInt<7>("h7f"), _io_output_T) @[FP8_MUL.scala 50:53 51:17 53:17]
    node _T_6 = or(nanFlagA, nanFlagB) @[FP8_MUL.scala 55:23]
    node _ovrChk_6_T = eq(subFlagA, UInt<1>("h0")) @[FP8_MUL.scala 58:21]
    node _ovrChk_6_T_1 = cat(_ovrChk_6_T, sigA) @[Cat.scala 33:92]
    node _ovrChk_6_T_2 = eq(subFlagB, UInt<1>("h0")) @[FP8_MUL.scala 58:44]
    node _ovrChk_6_T_3 = cat(_ovrChk_6_T_2, sigB) @[Cat.scala 33:92]
    node _ovrChk_6_T_4 = mul(_ovrChk_6_T_1, _ovrChk_6_T_3) @[FP8_MUL.scala 58:38]
    node _T_7 = asSInt(expA) @[FP8_MUL.scala 59:16]
    node _T_8 = asSInt(expB) @[FP8_MUL.scala 59:28]
    node _T_9 = add(_T_7, _T_8) @[FP8_MUL.scala 59:22]
    node _T_10 = tail(_T_9, 1) @[FP8_MUL.scala 59:22]
    node _T_11 = asSInt(_T_10) @[FP8_MUL.scala 59:22]
    node _T_12 = sub(_T_11, asSInt(UInt<6>("h1e"))) @[FP8_MUL.scala 59:35]
    node _T_13 = tail(_T_12, 1) @[FP8_MUL.scala 59:35]
    node _T_14 = asSInt(_T_13) @[FP8_MUL.scala 59:35]
    node _GEN_4 = mux(_T_6, UInt<1>("h0"), _ovrChk_6_T_4) @[FP8_MUL.scala 41:14 55:35 58:14]
    node _GEN_6 = mux(_T_2, UInt<1>("h0"), _GEN_4) @[FP8_MUL.scala 41:14 48:35]
    node _GEN_8 = mux(_T_1, UInt<1>("h0"), _GEN_6) @[FP8_MUL.scala 41:14 46:37]
    node _GEN_10 = mux(_T, UInt<1>("h0"), _GEN_8) @[FP8_MUL.scala 41:14 43:32]
    node ovrChk_6 = _GEN_10 @[FP8_MUL.scala 40:24]
    node _T_15 = bits(ovrChk_6, 5, 5) @[FP8_MUL.scala 59:52]
    node _T_16 = asSInt(_T_15) @[FP8_MUL.scala 59:56]
    node _T_17 = add(_T_14, _T_16) @[FP8_MUL.scala 59:42]
    node _T_18 = tail(_T_17, 1) @[FP8_MUL.scala 59:42]
    node _T_19 = asSInt(_T_18) @[FP8_MUL.scala 59:42]
    node _T_20 = asSInt(UInt<5>("h1e")) @[FP8_MUL.scala 59:79]
    node _T_21 = gt(_T_19, _T_20) @[FP8_MUL.scala 59:64]
    node _io_output_T_1 = xor(signA, signB) @[FP8_MUL.scala 63:30]
    node _io_output_T_2 = cat(_io_output_T_1, UInt<7>("h7c")) @[Cat.scala 33:92]
    node _T_22 = asSInt(expA) @[FP8_MUL.scala 64:22]
    node _T_23 = asSInt(expB) @[FP8_MUL.scala 64:34]
    node _T_24 = add(_T_22, _T_23) @[FP8_MUL.scala 64:28]
    node _T_25 = tail(_T_24, 1) @[FP8_MUL.scala 64:28]
    node _T_26 = asSInt(_T_25) @[FP8_MUL.scala 64:28]
    node _T_27 = sub(_T_26, asSInt(UInt<6>("h1e"))) @[FP8_MUL.scala 64:41]
    node _T_28 = tail(_T_27, 1) @[FP8_MUL.scala 64:41]
    node _T_29 = asSInt(_T_28) @[FP8_MUL.scala 64:41]
    node _T_30 = bits(ovrChk_6, 5, 5) @[FP8_MUL.scala 64:58]
    node _T_31 = asSInt(_T_30) @[FP8_MUL.scala 64:62]
    node _T_32 = add(_T_29, _T_31) @[FP8_MUL.scala 64:48]
    node _T_33 = tail(_T_32, 1) @[FP8_MUL.scala 64:48]
    node _T_34 = asSInt(_T_33) @[FP8_MUL.scala 64:48]
    node _T_35 = asSInt(UInt<1>("h0")) @[FP8_MUL.scala 64:85]
    node _T_36 = lt(_T_34, _T_35) @[FP8_MUL.scala 64:70]
    node _GEN_1 = mux(_T_36, UInt<1>("h0"), UInt<8>("haa")) @[FP8_MUL.scala 64:93 65:17 68:17]
    node _GEN_2 = mux(_T_21, _io_output_T_2, _GEN_1) @[FP8_MUL.scala 59:86 63:17]
    node _GEN_3 = mux(_T_6, UInt<7>("h7f"), _GEN_2) @[FP8_MUL.scala 55:35 56:15]
    node _GEN_5 = mux(_T_2, _GEN_0, _GEN_3) @[FP8_MUL.scala 48:35]
    node _GEN_7 = mux(_T_1, UInt<1>("h0"), _GEN_5) @[FP8_MUL.scala 46:37 47:15]
    node _GEN_9 = mux(_T, UInt<1>("h0"), _GEN_7) @[FP8_MUL.scala 43:32 45:15]
    io_output <= _GEN_9
